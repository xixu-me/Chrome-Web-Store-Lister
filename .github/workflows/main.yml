name: List Update

on:
  # Run daily at 8:00 AM UTC for consistent data collection
  schedule:
    - cron: "0 8 * * *"
  # Allow manual workflow execution for testing and maintenance
  workflow_dispatch:

jobs:
  update-list:
    runs-on: ubuntu-latest

    # Grant necessary permissions for repository operations
    permissions:
      contents: write

    steps:
      # Repository Setup
      - name: Checkout repository
        uses: actions/checkout@v5

      # Python Environment Configuration
      - name: Configure Python environment
        uses: actions/setup-python@v6
        with:
          python-version: "3.11"
          cache: "pip"

      # Dependency Installation
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Chrome Web Store Item Data Collection
      - name: Execute Chrome Web Store item data collection
        id: data-collection
        run: |
          echo "üöÄ Initiating Chrome Web Store item data collection process..."

          # Record collection start time for performance monitoring
          START_TIME=$(date +%s)

          # Execute the data collection script with optimized parameters
          if python main.py --output data.json --max-workers 3 --delay 0.2; then
            echo "‚úÖ Data collection completed successfully"
            COLLECTION_SUCCESS=true
          else
            echo "‚ùå Data collection failed"
            COLLECTION_SUCCESS=false
            exit 1
          fi

          # Calculate execution duration and record metrics
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))
          echo "duration=${DURATION}" >> $GITHUB_OUTPUT
          echo "success=${COLLECTION_SUCCESS}" >> $GITHUB_OUTPUT

          echo "‚è±Ô∏è Total execution time: ${DURATION} seconds"

      # Output Validation and Quality Assurance
      - name: Validate collected data and perform quality checks
        run: |
          # Verify output file was created
          if [ ! -f "data.json" ]; then
            echo "‚ùå Error: data.json output file was not created"
            echo "::error::Output file data.json was not generated"
            exit 1
          fi

          # Validate JSON format and structure
          if ! python -c "import json; data=json.load(open('data.json')); print(f'Items: {len(data)}')"; then
            echo "‚ùå Error: Invalid JSON format detected"
            echo "::error::Generated data.json has invalid JSON format"
            exit 1
          fi

          # Verify minimum data quality threshold (expect at least 1000 items)
          ITEM_COUNT=$(python -c "import json; print(len(json.load(open('data.json'))))")
          echo "items_count=${ITEM_COUNT}" >> $GITHUB_OUTPUT

          if [ "${ITEM_COUNT}" -lt 1000 ]; then
            echo "‚ö†Ô∏è Warning: Item count below expected threshold (${ITEM_COUNT})"
            echo "::warning::Item count is unusually low: ${ITEM_COUNT}"
          else
            echo "‚úÖ Data validation passed with ${ITEM_COUNT} items"
          fi

          # Verify data integrity and uniqueness
          python -c "import json; data=json.load(open('data.json')); unique_ids=set(item['id'] for item in data); print(f'‚úÖ All {len(data)} items have unique IDs' if len(unique_ids)==len(data) else '‚ö†Ô∏è Warning: Duplicate items detected')"

      # System Resource Monitoring
      - name: Monitor system resource utilization
        if: always()
        run: |
          echo "üìä Post-execution system resource analysis:"
          echo "Memory usage: $(free -h | grep Mem | awk '{print $3 "/" $2}')"
          echo "CPU load average: $(uptime | awk -F'load average:' '{print $2}')"
          echo "Disk usage: $(df -h / | tail -1 | awk '{print $5}')"

      # Date and Time Generation
      - name: Generate timestamp for release tagging
        id: timestamp
        run: |
          echo "current=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT
          echo "datetime=$(date +'%Y-%m-%d at %H:%M UTC')" >> $GITHUB_OUTPUT

      # GitHub Release Creation and Publishing
      - name: Create GitHub release with collected data
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.timestamp.outputs.current }}
          name: ${{ steps.timestamp.outputs.current }}
          body: |
            ## Chrome Web Store List Update

            üìÖ **Collection Time**: ${{ steps.timestamp.outputs.datetime }}
            üìä **Items Count**: ${{ steps.data-collection.outputs.items_count || 'N/A' }}
            ‚è±Ô∏è **Collection Time**: ${{ steps.data-collection.outputs.duration || 'N/A' }} seconds

            This release contains the latest Chrome Web Store item data collected automatically through our monitoring pipeline.
          files: data.json
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Failure Notification and Debugging
      - name: Handle workflow failure and provide diagnostic information
        if: failure()
        run: |
          echo "::error::‚ùå Chrome Web Store item data collection workflow failed!"
          echo "::error::Please review the workflow logs for detailed error analysis."
          echo "::error::Common failure causes: Network connectivity issues, API rate limiting, or Chrome Web Store structure changes."

          # Record failure details for operational monitoring
          echo "FAILURE_TIME=$(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_ENV
          echo "FAILURE_STEP=${{ github.action }}" >> $GITHUB_ENV

      # Success Notification and Summary
      - name: Report successful workflow completion
        if: success()
        run: |
          echo "‚úÖ Chrome Web Store item data collection workflow completed successfully!"
          echo "üìä Collected ${{ steps.data-collection.outputs.items_count || 'N/A' }} item records"
          echo "‚è±Ô∏è Total collection time: ${{ steps.data-collection.outputs.duration || 'N/A' }} seconds"

      # Cleanup and Resource Management
      - name: Clean up temporary files and resources
        if: always()
        run: |
          rm -f data.json
          echo "üßπ Temporary file cleanup completed"
